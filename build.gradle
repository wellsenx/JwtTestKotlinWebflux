buildscript {
    apply from: "artifactory.gradle"

    ext {
        kotlinVersion = '1.3.21'
        springBootVersion = '2.1.3.RELEASE'
    }
    repositories {
        maven {
            url "${artifactory_contextUrl}/${alfadigitalRepositoryName}"
            credentials {
                username = artifactory_user
                password = artifactory_password
            }
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.9.1")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2")
    }
}

allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    repositories {
        maven {
            url "${artifactory_contextUrl}/${alfadigitalRepositoryName}"
            credentials {
                username = artifactory_user
                password = artifactory_password
            }
        }
    }

    jacoco {
        toolVersion = "0.8.3"
    }
}

group = 'com.wellsen'
version = '1.0.1'

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply from: 'sonarqube-config.gradle'
apply from: 'artifactory-config.gradle'

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

sourceSets["main"].java {
    srcDir("src/main/kotlin")
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.7")
    implementation("io.jsonwebtoken:jjwt:0.7.0")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    testImplementation('org.springframework.boot:spring-boot-starter-webflux')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

jacocoTestReport {
    dependsOn "test"
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
        //noinspection GrDeprecatedAPIUsage
        xml.destination = "${buildDir}/reports/jacoco/jacocoTestReport.xml"
        //noinspection GrDeprecatedAPIUsage
        html.destination = "${buildDir}/reports/jacoco/jacocoTestReport"
        //noinspection GrDeprecatedAPIUsage
        csv.destination = "${buildDir}/reports/jacocoTestReport.csv"

        sourceDirectories = files(sourceSets["main"].allSource.srcDirs)
        classDirectories = files(sourceSets["main"].output)
        executionData = files(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', sonar_url
        property "sonar.login", sonar_login
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.verbose", true
        property "sonar.projectName", name
        property "sonar.projectVersion", version
        property "sonar.issuesReport.html.enable", "true"
        property "sonar.issuesReport.console.enable", "true"
        property "sonar.language", "kotlin"
        
        property 'sonar.java.binaries', "${buildDir}/classes/kotlin/main"
        property 'sonar.java.test.binaries', "${buildDir}/classes/kotlin/test"
        property 'sonar.jacoco.reportPath', fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/jacocoTestReport.xml"

        property "sonar.java.coveragePlugin", "jacoco"
        property "detekt.sonar.kotlin.config.path", "detekt-config.yml"
    }
}

//create a single Jar with all dependencies
task buildFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.wellsen.jwttestkotlinwebflux.JwttestKotlinWebfluxApplication'
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}