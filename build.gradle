buildscript {
    ext {
        kotlinVersion = '1.3.11'
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.9.1")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2")
    }
}

allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = "0.8.3"
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply from: 'sonarqube-config.gradle'

def name = 'JWT Test Kotlin Webflux'
group = 'com.wellsen'
version = '1.0.1'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

sourceSets["main"].java {
    srcDir("src/main/kotlin")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.7")
    implementation("io.jsonwebtoken:jjwt:0.7.0")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    testImplementation('org.springframework.boot:spring-boot-starter-webflux')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

jacocoTestReport {
    dependsOn "test"
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
        //noinspection GrDeprecatedAPIUsage
        xml.destination = "${buildDir}/reports/jacoco/jacocoTestReport.xml"
        //noinspection GrDeprecatedAPIUsage
        html.destination = "${buildDir}/reports/jacoco/jacocoTestReport"
        //noinspection GrDeprecatedAPIUsage
        csv.destination = "${buildDir}/reports/jacocoTestReport.csv"

        sourceDirectories = files(sourceSets["main"].allSource.srcDirs)
        classDirectories = files(sourceSets["main"].output)
        executionData = files(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', sonar_url
        property "sonar.login", sonar_login
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.verbose", true
        property "sonar.projectName", name
        property "sonar.projectVersion", version
        property "sonar.issuesReport.html.enable", "true"
        property "sonar.issuesReport.console.enable", "true"
        property "sonar.language", "kotlin"
        
        property 'sonar.java.binaries', "${buildDir}/classes/kotlin/main"
        property 'sonar.java.test.binaries', "${buildDir}/classes/kotlin/test"
        property 'sonar.jacoco.reportPath', fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/jacocoTestReport.xml"

        property "sonar.java.coveragePlugin", "jacoco"
        property "detekt.sonar.kotlin.config.path", "detekt-config.yml"
    }
}

//create a single Jar with all dependencies
task buildFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.wellsen.jwttestkotlinwebflux.JwttestKotlinWebfluxApplication'
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

publishing.publications {
    //noinspection GroovyAssignabilityCheck
    jar(MavenPublication) {
        groupId "${group}"
        artifactId "${project.name}"

        // Tell maven to prepare the generated "*.aar" file for publishing
        artifact("$buildDir/libs/${project.name}-${version}.jar")
    }
}

artifactory {
    def propsFile = rootProject.file('artifactory.properties')
    def props = new Properties()
    if (propsFile.exists()) {
        props.load(new FileInputStream(propsFile))
    }

    clientConfig.setIncludeEnvVars(true)

    //The base Artifactory URL if not overridden by the publisher/resolver
    contextUrl = props['artifactory_contextUrl']

    publish {
        repository {
            repoKey = props['repositoryName'] // The Artifactory repository key to publish to
            username = props['artifactory_user'] // The publisher user name
            password = props['artifactory_password'] // The publisher password
        }

        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('jar')
            publishArtifacts = true
        }
    }

    // Redefine basic properties of the build info object
    clientConfig.setIncludeEnvVars(true)
    clientConfig.setEnvVarsExcludePatterns('*password*,*secret*')
    clientConfig.timeout = 60
    // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}